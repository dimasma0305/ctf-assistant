<% 
const layoutData = {
    title: 'Settings',
    user: user,
    currentPage: 'settings',
    pageHeader: 'Settings & Configuration',
    headerActions: `
        <button class="btn btn-success btn-custom" onclick="saveAllSettings()">
            <i class="bi bi-check-circle me-2"></i>Save All Changes
        </button>
    `,
    extraJS: `
        <script>
            let hasUnsavedChanges = false;
            
            function markChanged() {
                hasUnsavedChanges = true;
                document.getElementById('save-indicator').style.display = 'block';
            }
            
            async function saveAllSettings() {
                const settings = {
                    botSettings: {
                        username: document.getElementById('bot-username').value,
                        password: document.getElementById('bot-password').value,
                        prefix: document.getElementById('command-prefix').value,
                        autoRole: document.getElementById('auto-role').checked,
                        autoArchive: document.getElementById('auto-archive').checked,
                        sessionLimit: document.getElementById('session-limit').value
                    },
                    notifications: {
                        emailAlerts: document.getElementById('email-alerts').checked,
                        discordNotifications: document.getElementById('discord-notifications').checked,
                        webhookUrl: document.getElementById('webhook-url').value,
                        alertThreshold: document.getElementById('alert-threshold').value
                    },
                    security: {
                        sessionTimeout: document.getElementById('session-timeout').value,
                        maxLoginAttempts: document.getElementById('max-login-attempts').value,
                        requireStrongPassword: document.getElementById('require-strong-password').checked,
                        twoFactorAuth: document.getElementById('two-factor-auth').checked
                    },
                    ctfSettings: {
                        defaultPlatform: document.getElementById('default-platform').value,
                        autoInit: document.getElementById('auto-init').checked,
                        archiveOldEvents: document.getElementById('archive-old-events').checked,
                        deleteAfterDays: document.getElementById('delete-after-days').value
                    }
                };
                
                try {
                    const response = await fetch('/api/settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(settings)
                    });
                    
                    if (response.ok) {
                        showAlert('Settings saved successfully!', 'success');
                        hasUnsavedChanges = false;
                        document.getElementById('save-indicator').style.display = 'none';
                    } else {
                        throw new Error('Failed to save settings');
                    }
                } catch (error) {
                    showAlert('Failed to save settings', 'danger');
                }
            }
            
            async function resetSettings(section) {
                if (confirm(\`Are you sure you want to reset \${section} settings to defaults?\`)) {
                    try {
                        const response = await fetch(\`/api/settings/\${section}/reset\`, {
                            method: 'POST'
                        });
                        
                        if (response.ok) {
                            showAlert(\`\${section} settings reset successfully\`, 'success');
                            loadSettings();
                        } else {
                            throw new Error('Failed to reset settings');
                        }
                    } catch (error) {
                        showAlert(\`Failed to reset \${section} settings\`, 'danger');
                    }
                }
            }
            
            async function testConnection() {
                const webhookUrl = document.getElementById('webhook-url').value;
                if (!webhookUrl) {
                    showAlert('Please enter a webhook URL first', 'warning');
                    return;
                }
                
                try {
                    const response = await fetch('/api/test-webhook', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ webhookUrl })
                    });
                    
                    if (response.ok) {
                        showAlert('Webhook connection successful!', 'success');
                    } else {
                        throw new Error('Webhook test failed');
                    }
                } catch (error) {
                    showAlert('Webhook connection failed', 'danger');
                }
            }
            
            function exportSettings() {
                // Export current settings as JSON
                const settings = {
                    exportDate: new Date().toISOString(),
                    botSettings: {
                        prefix: document.getElementById('command-prefix').value,
                        autoRole: document.getElementById('auto-role').checked,
                        autoArchive: document.getElementById('auto-archive').checked,
                        sessionLimit: document.getElementById('session-limit').value
                    },
                    notifications: {
                        emailAlerts: document.getElementById('email-alerts').checked,
                        discordNotifications: document.getElementById('discord-notifications').checked,
                        alertThreshold: document.getElementById('alert-threshold').value
                    },
                    security: {
                        sessionTimeout: document.getElementById('session-timeout').value,
                        maxLoginAttempts: document.getElementById('max-login-attempts').value,
                        requireStrongPassword: document.getElementById('require-strong-password').checked,
                        twoFactorAuth: document.getElementById('two-factor-auth').checked
                    },
                    ctfSettings: {
                        defaultPlatform: document.getElementById('default-platform').value,
                        autoInit: document.getElementById('auto-init').checked,
                        archiveOldEvents: document.getElementById('archive-old-events').checked,
                        deleteAfterDays: document.getElementById('delete-after-days').value
                    }
                };
                
                const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = \`ctf-assistant-settings-\${new Date().toISOString().split('T')[0]}.json\`;
                document.body.appendChild(a);
                a.click();
                URL.revokeObjectURL(url);
                document.body.removeChild(a);
            }
            
            function importSettings() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.json';
                input.onchange = function(event) {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            try {
                                const settings = JSON.parse(e.target.result);
                                applyImportedSettings(settings);
                                showAlert('Settings imported successfully!', 'success');
                            } catch (error) {
                                showAlert('Failed to import settings. Invalid file format.', 'danger');
                            }
                        };
                        reader.readAsText(file);
                    }
                };
                input.click();
            }
            
            function applyImportedSettings(settings) {
                if (settings.botSettings) {
                    document.getElementById('command-prefix').value = settings.botSettings.prefix || '';
                    document.getElementById('auto-role').checked = settings.botSettings.autoRole || false;
                    document.getElementById('auto-archive').checked = settings.botSettings.autoArchive || false;
                    document.getElementById('session-limit').value = settings.botSettings.sessionLimit || '';
                }
                
                if (settings.notifications) {
                    document.getElementById('email-alerts').checked = settings.notifications.emailAlerts || false;
                    document.getElementById('discord-notifications').checked = settings.notifications.discordNotifications || false;
                    document.getElementById('alert-threshold').value = settings.notifications.alertThreshold || '';
                }
                
                if (settings.security) {
                    document.getElementById('session-timeout').value = settings.security.sessionTimeout || '';
                    document.getElementById('max-login-attempts').value = settings.security.maxLoginAttempts || '';
                    document.getElementById('require-strong-password').checked = settings.security.requireStrongPassword || false;
                    document.getElementById('two-factor-auth').checked = settings.security.twoFactorAuth || false;
                }
                
                if (settings.ctfSettings) {
                    document.getElementById('default-platform').value = settings.ctfSettings.defaultPlatform || 'ctfd';
                    document.getElementById('auto-init').checked = settings.ctfSettings.autoInit || false;
                    document.getElementById('archive-old-events').checked = settings.ctfSettings.archiveOldEvents || false;
                    document.getElementById('delete-after-days').value = settings.ctfSettings.deleteAfterDays || '';
                }
                
                markChanged();
            }
            
            async function loadSettings() {
                try {
                    const response = await fetch('/api/settings');
                    const settings = await response.json();
                    applyImportedSettings(settings);
                } catch (error) {
                    console.error('Failed to load settings:', error);
                }
            }
            
            function showAlert(message, type = 'info') {
                const alertDiv = document.createElement('div');
                alertDiv.className = \`alert alert-\${type} alert-dismissible fade show\`;
                alertDiv.innerHTML = \`
                    \${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                \`;
                document.querySelector('.main-content').prepend(alertDiv);
                setTimeout(() => alertDiv.remove(), 5000);
            }
            
            // Initialize settings page
            document.addEventListener('DOMContentLoaded', function() {
                loadSettings();
                
                // Add change listeners to all form elements
                const formElements = document.querySelectorAll('input, select, textarea');
                formElements.forEach(element => {
                    element.addEventListener('change', markChanged);
                });
                
                // Warn about unsaved changes
                window.addEventListener('beforeunload', function(e) {
                    if (hasUnsavedChanges) {
                        e.preventDefault();
                        e.returnValue = '';
                    }
                });
            });
        </script>
    `
};
%>

<%- include('layout', { 
    ...layoutData, 
    body: `
        <!-- Save Indicator -->
        <div id="save-indicator" class="alert alert-warning alert-dismissible fade show" style="display: none;" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            You have unsaved changes. Don't forget to save your settings.
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        
        <!-- Settings Tabs -->
        <div class="row">
            <div class="col-12">
                <nav>
                    <div class="nav nav-pills mb-4" id="nav-tab" role="tablist">
                        <button class="nav-link active me-2" id="bot-tab" data-bs-toggle="pill" data-bs-target="#bot-settings" type="button">
                            <i class="bi bi-robot me-2"></i>Bot Settings
                        </button>
                        <button class="nav-link me-2" id="notifications-tab" data-bs-toggle="pill" data-bs-target="#notifications" type="button">
                            <i class="bi bi-bell me-2"></i>Notifications
                        </button>
                        <button class="nav-link me-2" id="security-tab" data-bs-toggle="pill" data-bs-target="#security" type="button">
                            <i class="bi bi-shield me-2"></i>Security
                        </button>
                        <button class="nav-link me-2" id="ctf-tab" data-bs-toggle="pill" data-bs-target="#ctf-settings" type="button">
                            <i class="bi bi-flag me-2"></i>CTF Settings
                        </button>
                        <button class="nav-link" id="backup-tab" data-bs-toggle="pill" data-bs-target="#backup" type="button">
                            <i class="bi bi-archive me-2"></i>Backup & Restore
                        </button>
                    </div>
                </nav>
                
                <div class="tab-content" id="nav-tabContent">
                    <!-- Bot Settings Tab -->
                    <div class="tab-pane fade show active" id="bot-settings">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="bi bi-robot me-2"></i>Bot Configuration</h5>
                                <button class="btn btn-outline-danger btn-sm" onclick="resetSettings('bot')">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset to Defaults
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="bot-username" class="form-label">Admin Username</label>
                                            <input type="text" class="form-control" id="bot-username" placeholder="Enter admin username">
                                            <div class="form-text">Username for web panel access</div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="bot-password" class="form-label">Admin Password</label>
                                            <input type="password" class="form-control" id="bot-password" placeholder="Enter new password">
                                            <div class="form-text">Leave empty to keep current password</div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="command-prefix" class="form-label">Command Prefix</label>
                                            <input type="text" class="form-control" id="command-prefix" placeholder="/" maxlength="5">
                                            <div class="form-text">Prefix for bot commands (e.g., /, !)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="session-limit" class="form-label">Session Limit per Hour</label>
                                            <input type="number" class="form-control" id="session-limit" min="1" max="1000" value="100">
                                            <div class="form-text">API session limit for bot operations</div>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="auto-role" checked>
                                            <label class="form-check-label" for="auto-role">
                                                Auto-assign CTF roles
                                            </label>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="auto-archive" checked>
                                            <label class="form-check-label" for="auto-archive">
                                                Auto-archive completed events
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Notifications Tab -->
                    <div class="tab-pane fade" id="notifications">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="bi bi-bell me-2"></i>Notification Settings</h5>
                                <button class="btn btn-outline-danger btn-sm" onclick="resetSettings('notifications')">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset to Defaults
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="email-alerts">
                                            <label class="form-check-label" for="email-alerts">
                                                Email Alerts
                                            </label>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="discord-notifications" checked>
                                            <label class="form-check-label" for="discord-notifications">
                                                Discord Notifications
                                            </label>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="alert-threshold" class="form-label">Alert Threshold (errors/hour)</label>
                                            <input type="number" class="form-control" id="alert-threshold" min="1" max="100" value="10">
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="webhook-url" class="form-label">Webhook URL</label>
                                            <div class="input-group">
                                                <input type="url" class="form-control" id="webhook-url" placeholder="https://discord.com/api/webhooks/...">
                                                <button class="btn btn-outline-secondary" type="button" onclick="testConnection()">
                                                    <i class="bi bi-wifi"></i> Test
                                                </button>
                                            </div>
                                            <div class="form-text">Discord webhook for system notifications</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Security Tab -->
                    <div class="tab-pane fade" id="security">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="bi bi-shield me-2"></i>Security Settings</h5>
                                <button class="btn btn-outline-danger btn-sm" onclick="resetSettings('security')">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset to Defaults
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="session-timeout" class="form-label">Session Timeout (minutes)</label>
                                            <input type="number" class="form-control" id="session-timeout" min="5" max="1440" value="60">
                                            <div class="form-text">Automatically logout after inactivity</div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="max-login-attempts" class="form-label">Max Login Attempts</label>
                                            <input type="number" class="form-control" id="max-login-attempts" min="1" max="10" value="5">
                                            <div class="form-text">Lock account after failed attempts</div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="require-strong-password" checked>
                                            <label class="form-check-label" for="require-strong-password">
                                                Require Strong Password
                                            </label>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="two-factor-auth">
                                            <label class="form-check-label" for="two-factor-auth">
                                                Two-Factor Authentication (Coming Soon)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <strong>Security Notice:</strong> Changes to security settings will take effect immediately and may require re-login.
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- CTF Settings Tab -->
                    <div class="tab-pane fade" id="ctf-settings">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="bi bi-flag me-2"></i>CTF Platform Settings</h5>
                                <button class="btn btn-outline-danger btn-sm" onclick="resetSettings('ctf')">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset to Defaults
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="default-platform" class="form-label">Default CTF Platform</label>
                                            <select class="form-select" id="default-platform">
                                                <option value="ctfd">CTFd</option>
                                                <option value="rctf">rCTF</option>
                                                <option value="gzctf">GzCTF</option>
                                                <option value="generic">Generic</option>
                                            </select>
                                            <div class="form-text">Default platform for /solve init command</div>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="auto-init">
                                            <label class="form-check-label" for="auto-init">
                                                Auto-initialize challenges
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="delete-after-days" class="form-label">Delete events after (days)</label>
                                            <input type="number" class="form-control" id="delete-after-days" min="1" max="365" value="90">
                                            <div class="form-text">Automatically delete old events</div>
                                        </div>
                                        
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="archive-old-events" checked>
                                            <label class="form-check-label" for="archive-old-events">
                                                Archive completed events
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Backup & Restore Tab -->
                    <div class="tab-pane fade" id="backup">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-archive me-2"></i>Backup & Restore</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Export Settings</h6>
                                        <p class="text-muted">Download your current configuration as a backup file.</p>
                                        <button class="btn btn-outline-primary" onclick="exportSettings()">
                                            <i class="bi bi-download me-2"></i>Export Settings
                                        </button>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <h6>Import Settings</h6>
                                        <p class="text-muted">Restore configuration from a backup file.</p>
                                        <button class="btn btn-outline-secondary" onclick="importSettings()">
                                            <i class="bi bi-upload me-2"></i>Import Settings
                                        </button>
                                    </div>
                                </div>
                                
                                <hr>
                                
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    <strong>Important:</strong> Importing settings will overwrite your current configuration. Make sure to export a backup first!
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `
}) %>
