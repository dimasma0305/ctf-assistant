<% 
const layoutData = {
    title: 'CTF Data',
    user: user,
    currentPage: 'data',
    pageHeader: 'CTF Data Management',
    headerActions: `
        <div class="dropdown me-2">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="bi bi-funnel me-1"></i>Filter
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="filterData('all')">All Events</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterData('active')">Active Events</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterData('completed')">Completed Events</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterData('upcoming')">Upcoming Events</a></li>
            </ul>
        </div>
        <button class="btn btn-success btn-custom me-2" onclick="exportData()">
            <i class="bi bi-download me-2"></i>Export Data
        </button>
        <button class="btn btn-primary btn-custom" onclick="refreshData()">
            <i class="bi bi-arrow-clockwise me-2"></i>Refresh
        </button>
    `,
    extraCSS: `
        <style>
            .data-card {
                border: none;
                border-radius: 12px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                transition: all 0.3s ease;
            }
            
            .data-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 5px 20px rgba(0,0,0,0.15);
            }
            
            .event-status {
                position: absolute;
                top: 10px;
                right: 10px;
                padding: 0.25rem 0.75rem;
                border-radius: 15px;
                font-size: 0.75rem;
                font-weight: 600;
            }
            
            .status-active {
                background: linear-gradient(45deg, #28a745, #20c997);
                color: white;
            }
            
            .status-completed {
                background: linear-gradient(45deg, #6c757d, #495057);
                color: white;
            }
            
            .status-upcoming {
                background: linear-gradient(45deg, #007bff, #6610f2);
                color: white;
            }
            
            .solve-badge {
                background: linear-gradient(45deg, #ffc107, #fd7e14);
                color: #212529;
                border-radius: 20px;
                padding: 0.3rem 0.8rem;
                font-size: 0.8rem;
                font-weight: 600;
            }
            
            .search-box {
                border-radius: 25px;
                border: 2px solid #e9ecef;
                padding: 0.75rem 1.25rem;
                transition: all 0.3s ease;
            }
            
            .search-box:focus {
                border-color: #6f42c1;
                box-shadow: 0 0 0 0.2rem rgba(111, 66, 193, 0.25);
            }
            
            .table-hover tbody tr:hover {
                background-color: rgba(111, 66, 193, 0.1);
                transform: scale(1.01);
                transition: all 0.2s ease;
            }
            
            .pagination-custom .page-link {
                border-radius: 8px;
                margin: 0 2px;
                border: none;
                color: #6f42c1;
            }
            
            .pagination-custom .page-link:hover {
                background-color: #6f42c1;
                color: white;
            }
            
            .pagination-custom .page-item.active .page-link {
                background-color: #6f42c1;
                border-color: #6f42c1;
            }
            
            .modal-lg {
                max-width: 800px;
            }
        </style>
    `,
    extraJS: `
        <script>
            let currentFilter = 'all';
            let currentPage = 1;
            let itemsPerPage = 10;
            
            async function refreshData() {
                showLoading(true);
                try {
                    const response = await fetch('/api/ctf-events');
                    const data = await response.json();
                    updateEventsTable(data);
                    updateSolvesTable();
                } catch (error) {
                    console.error('Failed to refresh data:', error);
                    showAlert('Failed to refresh data', 'danger');
                } finally {
                    showLoading(false);
                }
            }
            
            function showLoading(show) {
                const loadingElements = document.querySelectorAll('.loading-overlay');
                loadingElements.forEach(el => {
                    el.style.display = show ? 'flex' : 'none';
                });
            }
            
            function updateEventsTable(events) {
                const tbody = document.getElementById('events-tbody');
                if (!events || events.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted py-4">No events found</td></tr>';
                    return;
                }
                
                // Filter events based on current filter
                let filteredEvents = events;
                if (currentFilter !== 'all') {
                    filteredEvents = events.filter(event => event.status === currentFilter);
                }
                
                // Pagination
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedEvents = filteredEvents.slice(startIndex, endIndex);
                
                tbody.innerHTML = paginatedEvents.map(event => 
                    '<tr onclick="viewEventDetails(' + event.id + ')" style="cursor: pointer;">' +
                        '<td>' +
                            '<div class="fw-bold">' + event.title + '</div>' +
                            '<small class="text-muted">' + (event.organizer || 'Unknown') + '</small>' +
                        '</td>' +
                        '<td>' +
                            '<span class="badge status-' + event.status + '">' + event.status.charAt(0).toUpperCase() + event.status.slice(1) + '</span>' +
                        '</td>' +
                        '<td>' + new Date(event.start_date).toLocaleDateString() + '</td>' +
                        '<td>' + new Date(event.finish_date).toLocaleDateString() + '</td>' +
                        '<td>' +
                            '<span class="solve-badge">' + (event.solves || 0) + ' solves</span>' +
                        '</td>' +
                        '<td>' +
                            '<div class="dropdown">' +
                                '<button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" onclick="event.stopPropagation()">Actions</button>' +
                                '<ul class="dropdown-menu">' +
                                    '<li><a class="dropdown-item" href="#" onclick="viewEventDetails(' + event.id + '); event.stopPropagation();"><i class="bi bi-eye me-2"></i>View Details</a></li>' +
                                    '<li><a class="dropdown-item" href="#" onclick="exportEventData(' + event.id + '); event.stopPropagation();"><i class="bi bi-download me-2"></i>Export</a></li>' +
                                    '<li><hr class="dropdown-divider"></li>' +
                                    '<li><a class="dropdown-item text-danger" href="#" onclick="deleteEvent(' + event.id + '); event.stopPropagation();"><i class="bi bi-trash me-2"></i>Delete</a></li>' +
                                '</ul>' +
                            '</div>' +
                        '</td>' +
                    '</tr>'
                ).join('');
                
                updatePagination(filteredEvents.length);
            }
            
            function updatePagination(totalItems) {
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                const pagination = document.getElementById('pagination');
                
                if (totalPages <= 1) {
                    pagination.innerHTML = '';
                    return;
                }
                
                let paginationHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    paginationHTML += '<li class="page-item ' + (i === currentPage ? 'active' : '') + '">' +
                        '<a class="page-link" href="#" onclick="changePage(' + i + '); return false;">' + i + '</a>' +
                    '</li>';
                }
                
                pagination.innerHTML = paginationHTML;
            }
            
            function changePage(page) {
                currentPage = page;
                refreshData();
            }
            
            function filterData(filter) {
                currentFilter = filter;
                currentPage = 1;
                refreshData();
            }
            
            function searchEvents() {
                const searchTerm = document.getElementById('search-input').value.toLowerCase();
                const rows = document.querySelectorAll('#events-tbody tr');
                
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    row.style.display = text.includes(searchTerm) ? '' : 'none';
                });
            }
            
            async function exportData() {
                try {
                    const response = await fetch('/api/export-data', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'ctf-data-' + new Date().toISOString().split('T')[0] + '.json';
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        showAlert('Data exported successfully', 'success');
                    } else {
                        throw new Error('Export failed');
                    }
                } catch (error) {
                    showAlert('Failed to export data', 'danger');
                }
            }
            
            function viewEventDetails(eventId) {
                // Implementation for viewing event details
                const modal = new bootstrap.Modal(document.getElementById('eventDetailsModal'));
                // Load event details via AJAX
                loadEventDetails(eventId);
                modal.show();
            }
            
            async function loadEventDetails(eventId) {
                try {
                    const response = await fetch('/api/events/' + eventId);
                    const event = await response.json();
                    
                    document.getElementById('modal-event-title').textContent = event.title;
                    document.getElementById('modal-event-description').textContent = event.description || 'No description available';
                    document.getElementById('modal-event-organizer').textContent = event.organizer || 'Unknown';
                    document.getElementById('modal-event-dates').textContent = 
                        new Date(event.start_date).toLocaleString() + ' - ' + new Date(event.finish_date).toLocaleString();
                    document.getElementById('modal-event-url').innerHTML = event.url ? 
                        '<a href="' + event.url + '" target="_blank" class="btn btn-sm btn-primary">Visit Event</a>' : 
                        'No URL provided';
                    
                    // Load solves for this event
                    loadEventSolves(eventId);
                } catch (error) {
                    console.error('Failed to load event details:', error);
                }
            }
            
            async function loadEventSolves(eventId) {
                try {
                    const response = await fetch('/api/events/' + eventId + '/solves');
                    const solves = await response.json();
                    
                    const solvesContainer = document.getElementById('modal-event-solves');
                    if (solves.length === 0) {
                        solvesContainer.innerHTML = '<p class="text-muted">No solves recorded</p>';
                        return;
                    }
                    
                    solvesContainer.innerHTML = 
                        '<div class="table-responsive">' +
                            '<table class="table table-sm">' +
                                '<thead>' +
                                    '<tr>' +
                                        '<th>Challenge</th>' +
                                        '<th>Solver(s)</th>' +
                                        '<th>Date</th>' +
                                    '</tr>' +
                                '</thead>' +
                                '<tbody>' +
                                    solves.map(solve => 
                                        '<tr>' +
                                            '<td>' + solve.challenge + '</td>' +
                                            '<td>' + solve.users.join(', ') + '</td>' +
                                            '<td>' + new Date(solve.createdAt).toLocaleDateString() + '</td>' +
                                        '</tr>'
                                    ).join('') +
                                '</tbody>' +
                            '</table>' +
                        '</div>';
                } catch (error) {
                    console.error('Failed to load event solves:', error);
                }
            }
            
            function deleteEvent(eventId) {
                if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
                    // Implementation for deleting event
                    console.log('Delete event:', eventId);
                    // Add actual delete logic here
                }
            }
            
            function showAlert(message, type = 'info') {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-' + type + ' alert-dismissible fade show';
                alertDiv.innerHTML = message + 
                    '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
                document.querySelector('.main-content').prepend(alertDiv);
                setTimeout(() => alertDiv.remove(), 5000);
            }
            
            // Initialize data page
            document.addEventListener('DOMContentLoaded', function() {
                refreshData();
                
                // Setup search
                const searchInput = document.getElementById('search-input');
                let searchTimeout;
                searchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(searchEvents, 300);
                });
            });
        </script>
    `
};
%>

<%- include('layout', { 
    ...layoutData, 
    body: `
        <!-- Search and Controls -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <input 
                        type="text" 
                        class="form-control search-box border-start-0" 
                        placeholder="Search events, challenges, or solvers..."
                        id="search-input"
                    >
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex justify-content-end">
                    <select class="form-select w-auto me-2" onchange="itemsPerPage = this.value; refreshData();">
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                        <option value="50">50 per page</option>
                        <option value="100">100 per page</option>
                    </select>
                </div>
            </div>
        </div>
        
        <!-- Events Table -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-calendar-event me-2"></i>CTF Events
                </h5>
                <span class="badge bg-primary" id="events-count">Loading...</span>
            </div>
            <div class="card-body p-0">
                <div class="loading-overlay" style="display: none; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.8); z-index: 10; align-items: center; justify-content: center;">
                    <div class="text-center">
                        <div class="loading"></div>
                        <p class="text-muted mt-2">Loading data...</p>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Event Name</th>
                                <th>Status</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Solves</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="events-tbody">
                            <tr>
                                <td colspan="6" class="text-center py-4">
                                    <div class="loading"></div>
                                    <p class="text-muted mt-2">Loading events...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <nav aria-label="Events pagination" class="mt-3">
                    <ul class="pagination pagination-custom justify-content-center" id="pagination">
                        <!-- Pagination will be dynamically generated -->
                    </ul>
                </nav>
            </div>
        </div>
        
        <!-- Statistics Overview -->
        <div class="row">
            <div class="col-md-4 mb-4">
                <div class="card data-card">
                    <div class="card-body text-center">
                        <i class="bi bi-calendar-event text-primary" style="font-size: 2rem;"></i>
                        <h3 class="mt-3" id="total-events-count">-</h3>
                        <p class="text-muted">Total Events</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4 mb-4">
                <div class="card data-card">
                    <div class="card-body text-center">
                        <i class="bi bi-trophy text-success" style="font-size: 2rem;"></i>
                        <h3 class="mt-3" id="total-solves-count">-</h3>
                        <p class="text-muted">Total Solves</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4 mb-4">
                <div class="card data-card">
                    <div class="card-body text-center">
                        <i class="bi bi-people text-info" style="font-size: 2rem;"></i>
                        <h3 class="mt-3" id="active-solvers-count">-</h3>
                        <p class="text-muted">Active Solvers</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Event Details Modal -->
        <div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modal-event-title">Event Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Description</h6>
                                <p id="modal-event-description">-</p>
                                
                                <h6>Organizer</h6>
                                <p id="modal-event-organizer">-</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Event Dates</h6>
                                <p id="modal-event-dates">-</p>
                                
                                <h6>Event URL</h6>
                                <div id="modal-event-url">-</div>
                            </div>
                        </div>
                        
                        <hr>
                        
                        <h6>Solves</h6>
                        <div id="modal-event-solves">
                            <div class="text-center py-3">
                                <div class="loading"></div>
                                <p class="text-muted mt-2">Loading solves...</p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="exportEventData()">
                            <i class="bi bi-download me-2"></i>Export Event Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `
}) %>
